# -*- coding: utf-8 -*-import torchvision.datasets as datasetsfrom .noisify import *class scifar10(datasets.CIFAR10):    def __init__(self, **kwargs):        super(scifar10, self).__init__(**kwargs)    def __getitem__(self, item):        X, y = super(scifar10, self).__getitem__(item)        return X, y, item    def __len__(self):        return super(scifar10, self).__len__()class scifar100(datasets.CIFAR100):    def __init__(self, **kwargs):        super(scifar100, self).__init__(**kwargs)    def __getitem__(self, item):        X, y = super(scifar100, self).__getitem__(item)        return X, y, item    def __len__(self):        return super(scifar100, self).__len__()class sSVHN(datasets.SVHN):    def __init__(self, **kwargs):        super(sSVHN, self).__init__(**kwargs)    def __getitem__(self, item):        X, y = super(sSVHN, self).__getitem__(item)        return X, y, item    def __len__(self):        return super(sSVHN, self).__len__()class sMnist(datasets.MNIST):    def __init__(self, **kwargs):        super(sMnist, self).__init__(**kwargs)    def __getitem__(self, item):        X, y = super(sMnist, self).__getitem__(item)        return X, y, item    def __len__(self):        return super(sMnist, self).__len__()def read_labels(f_get_item, length):    labels = np.zeros(length, dtype=np.int)    for idx in range(length):        X, y = f_get_item(idx)        labels[idx] = y    return labelsclass noisy_cifar10(datasets.CIFAR10):    def __init__(self,noise_type='symmetric', noise_ratio=0,**kwargs):        super(noisy_cifar10, self).__init__(**kwargs)        assert noise_type in ['none','symmetric', 'asymmetric']        if noise_type == 'symmetric':            noisifier = noisify_cifar10_symmetric        else:            noisifier = noisify_cifar10_asymmetric        nb_total = super(noisy_cifar10, self).__len__()        clean_labels = read_labels(super(noisy_cifar10, self).__getitem__, nb_total)        self.noisy_labels, self.P = noisifier(clean_labels, noise_ratio)        self.P = self.P.astype(np.float32)        self.num2one_hot = np.eye(10, dtype=np.float32)    def __getitem__(self, item):        X_clean, y_clean = super(noisy_cifar10, self).__getitem__(item)        y_noise = self.noisy_labels[item]        noisy_prob = self.P[y_clean, :]        clean_prob = self.num2one_hot[y_clean, :]        return X_clean, y_noise, noisy_prob, clean_prob, item    def __len__(self):        return super(noisy_cifar10, self).__len__()class noisy_cifar100(datasets.CIFAR100):    def __init__(self, noise_type='symmetric', noise_ratio=0., **kwargs):        super(noisy_cifar100, self).__init__(**kwargs)        assert noise_type in ['none','symmetric', 'asymmetric']        if noise_type == 'symmetric':            noisifier = noisify_cifar100_symmetric        else:            noisifier = noisify_cifar100_asymmetric        nb_total = super(noisy_cifar100, self).__len__()        clean_labels = read_labels(super(noisy_cifar100, self).__getitem__, nb_total)        self.noisy_labels, self.P = noisifier(clean_labels, noise_ratio)        self.P = self.P.astype(np.float32)        self.num2one_hot = np.eye(100, dtype=np.float32)    def __getitem__(self, item):        X_clean, y_clean = super(noisy_cifar100, self).__getitem__(item)        y_noise = self.noisy_labels[item]        noisy_prob = self.P[y_clean, :]        clean_prob = self.num2one_hot[y_clean, :]        return X_clean, y_noise, noisy_prob, clean_prob, item    def __len__(self):        return super(noisy_cifar100, self).__len__()